user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    server {
        listen       80;
        server_name  localhost;

        charset utf-8;
        root /usr/share/nginx/html;
        index index.html;

        # 启用调试日志
        error_log /var/log/nginx/error.log debug;
        access_log /var/log/nginx/access.log combined;

        gzip on;
        gzip_comp_level 6;
        gzip_min_length 1000;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        client_max_body_size 10M;

        location = /health {
            default_type text/plain;
            return 200 'ok';
            access_log off;
        }

        # 添加调试端点
        location = /debug {
            default_type application/json;
            return 200 '{"server_addr":"$server_addr","remote_addr":"$remote_addr","host":"$host","request_uri":"$request_uri","http_host":"$http_host","time":"$time_local"}';
        }

        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff2|ttf|woff)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
            try_files $uri $uri/ =404;
            access_log off;
        }

        location / {
            try_files $uri $uri/ /index.html;
            add_header X-Frame-Options "SAMEORIGIN";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";
        }

        # API 请求代理
        location /api/ {
            # 使用后端服务名称
            proxy_pass http://stock-backend:9099/api/;
            
            # 添加调试头
            add_header X-Debug-Backend "stock-backend:9099" always;
            add_header X-Debug-Remote-Addr $remote_addr always;
            add_header X-Debug-Host $host always;
            add_header X-Debug-Request-Uri $request_uri always;
            add_header X-Debug-Method $request_method always;
            
            # 确保正确传递 HTTP 方法
            proxy_method $request_method;
            
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # 增加超时时间
            proxy_connect_timeout 60;
            proxy_send_timeout 120;
            proxy_read_timeout 120;
            
            proxy_buffer_size 16k;
            proxy_buffers 4 64k;
            proxy_busy_buffers_size 128k;
            proxy_temp_file_write_size 128k;
            
            # 禁用缓存
            proxy_cache off;
            proxy_buffering off;
            
            # CORS 设置
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-CSRF-Token' always;
            
            # 处理 OPTIONS 请求
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-CSRF-Token' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            
            # 错误处理
            proxy_intercept_errors on;
            error_page 500 502 503 504 = @error_handler;
        }
        
        # 错误处理 location
        location @error_handler {
            internal;
            default_type application/json;
            return 502 '{"success":false,"message":"后端服务暂时不可用，请稍后重试","timestamp":"$time_iso8601","path":"$request_uri"}';
        }
        
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
} 